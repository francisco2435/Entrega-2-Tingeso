services:
  # Nginx servers
  nginx-frontend:
    image: nginx
    container_name: nginx-frontend-container
    restart: always
    ports:
      - 8090:8090
    volumes:
      - ./frontend.conf:/etc/nginx/nginx.conf
      - ./src/http-common.js:/usr/share/nginx/html/src/http-common.js 
    networks:
      - frontend-network
    depends_on:
      - frontend1
      - frontend2
      - frontend3

  nginx-backend:
    image: nginx
    container_name: nginx-backend-container
    restart: always
    ports:
      - 80:80
    volumes:
      - ./backend.conf:/etc/nginx/nginx.conf
    networks:
      - backend-network
    depends_on:
      - backend1
      - backend2
      - backend3

  # Postgres service
  postgres:
    container_name: vigorous_elion
    image: postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_PASSWORD: 1234
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    networks:
      - backend-network
    volumes:
      - postgres_data:/var/lib/postgresql/data 

  # Backend services
  backend1:
    container_name: backend-container-1
    image: franciscoriquelmenunez/backend-container
    ports:
      - 8091:8090
    environment:
      DB_HOST: vigorous_elion
      DB_USERNAME: postgres
      DB_PASSWORD: 1234
    networks:
      - backend-network
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure

  backend2:
    container_name: backend-container-2
    image: franciscoriquelmenunez/backend-container
    ports:
      - 8092:8090
    environment:
      DB_HOST: vigorous_elion
      DB_USERNAME: postgres
      DB_PASSWORD: 1234
    networks:
      - backend-network
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure

  backend3:
    container_name: backend-container-3
    image: franciscoriquelmenunez/backend-container
    ports:
      - 8093:8090
    environment:
      DB_HOST: vigorous_elion
      DB_USERNAME: postgres
      DB_PASSWORD: 1234
    networks:
      - backend-network
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure

  # Frontend services
  frontend1:
    container_name: frontend-container-1
    image: franciscoriquelmenunez/frontend-container
    ports:
      - 3001:3000
    networks:
      - frontend-network 
    deploy:
      restart_policy:
        condition: on-failure

  frontend2:
    container_name: frontend-container-2
    image: franciscoriquelmenunez/frontend-container
    ports:
      - 3002:3000
    networks:
      - frontend-network 
    deploy:
      restart_policy:
        condition: on-failure

  frontend3:
    container_name: frontend-container-3
    image: franciscoriquelmenunez/frontend-container
    ports:
      - 3003:3000
    networks:
      - frontend-network 
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  postgres_data:

networks:
  frontend-network:
  backend-network: